plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.13-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.ceojun7'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis:mybatis:3.5.6'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok' // 테스트 의존성 추가
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 의존성 추가
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-client:5.6.1'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.2'
    //메일 관련
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    //메일 관련

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
    implementation 'org.springframework.boot:spring-boot-configuration-processor:3.0.5'

}

tasks.named('test') {
    useJUnitPlatform()
}

task('release') {
    /* ./gradlew build를 먼저 실행하라는 뜻이다. */
    dependsOn("build")

    doLast {
        def stdout = new ByteArrayOutputStream()
        /* exec - 커맨드 라인 프로세서; 파워셸/터미널에서 실행하는 것과 같다. */
        exec {
            /* $eb setenv SPRING_PROFILES_ACTIVE=prod */
            commandLine 'eb', 'setenv', 'SPRING_PROFILES_ACTIVE=prod'
            standardOutput = stdout
        }
        /* 결과 로깅을 위한 작업 */
        println "eb setenv SPRING_PROFILES_ACTIVE=prod :\n$stdout";
        exec {
            /* $eb deploy */
            commandLine 'eb', 'deploy'
            standardOutput = stdout
        }
        println "eb deploy :\n$stdout";
        println "Release succeeded."
    }
}
